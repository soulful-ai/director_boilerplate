#!/bin/bash

# PM Director Environment Setup Script
# Automatically detects environment and updates configuration

set -e

echo "🔧 PM Director Environment Setup"
echo "=============================="

# Detect environment
if [[ -n "$CODESPACE_NAME" ]] || [[ "$PWD" == /workspaces/* ]]; then
    ENV_TYPE="codespaces"
    # In a real Codespace, use /workspaces/workspace
    # For testing on local, use the actual workspace path
    if [[ -d "/workspaces/workspace" ]]; then
        WORKSPACE_ROOT="/workspaces/workspace"
    else
        # Fallback for testing - find workspace root
        CURRENT_DIR="$PWD"
        while [[ "$CURRENT_DIR" != "/" ]]; do
            if [[ -f "$CURRENT_DIR/CLAUDE.md" ]]; then
                WORKSPACE_ROOT="$CURRENT_DIR"
                break
            fi
            CURRENT_DIR="$(dirname "$CURRENT_DIR")"
        done
    fi
    echo "📡 Detected: GitHub Codespaces environment"
elif [[ "$PWD" == *Workspace/workspace* ]]; then
    ENV_TYPE="local"
    # Find workspace root by looking for CLAUDE.md
    CURRENT_DIR="$PWD"
    while [[ "$CURRENT_DIR" != "/" ]]; do
        if [[ -f "$CURRENT_DIR/CLAUDE.md" ]]; then
            WORKSPACE_ROOT="$CURRENT_DIR"
            echo "💻 Detected: Local development environment"
            break
        fi
        CURRENT_DIR="$(dirname "$CURRENT_DIR")"
    done
else
    ENV_TYPE="custom"
    # Try to detect workspace root - look for CLAUDE.md in parent directories
    CURRENT_DIR="$PWD"
    while [[ "$CURRENT_DIR" != "/" ]]; do
        if [[ -f "$CURRENT_DIR/CLAUDE.md" ]]; then
            WORKSPACE_ROOT="$CURRENT_DIR"
            echo "🎯 Detected: Custom workspace at $WORKSPACE_ROOT"
            break
        fi
        CURRENT_DIR="$(dirname "$CURRENT_DIR")"
    done
    
    if [[ -z "$WORKSPACE_ROOT" ]]; then
        echo "❓ Unable to auto-detect workspace. Please run from workspace root."
        exit 1
    fi
fi

ENV_FILE="$WORKSPACE_ROOT/pm/.env"

# Update PM's .env file with detected environment
echo "📝 Updating PM's .env file..."

# Backup existing .env if it exists
if [[ -f "$ENV_FILE" ]]; then
    cp "$ENV_FILE" "$ENV_FILE.backup"
    echo "📦 Backed up existing .env to .env.backup"
fi

# Only update WORKSPACE_ROOT in existing .env
if [[ -f "$ENV_FILE" ]]; then
    # Update WORKSPACE_ROOT line if it exists
    sed -i.tmp "s|^WORKSPACE_ROOT=.*|WORKSPACE_ROOT=$WORKSPACE_ROOT|" "$ENV_FILE"
    rm -f "$ENV_FILE.tmp"
    echo "✅ Updated WORKSPACE_ROOT in PM's .env"
else
    # Create new .env if it doesn't exist
    cat > "$ENV_FILE" << EOF
# PM Director Environment Variables
# Auto-generated by setup-environment.sh

# REQUIRED - Workspace Configuration
WORKSPACE_ROOT=$WORKSPACE_ROOT

# DERIVED PATHS (flat git submodule structure)
PM_HOME=\${WORKSPACE_ROOT}/pm
CODER_HOME=\${WORKSPACE_ROOT}/platforma
INFRA_HOME=\${WORKSPACE_ROOT}/agentfarm
ML_HOME=\${WORKSPACE_ROOT}/modelyard
MARKETING_HOME=\${WORKSPACE_ROOT}/mercatoria

# MCP Configuration  
MCP_CLI_DIR=\${WORKSPACE_ROOT}/pm/apps/mcp/cli_use
ALLOWED_DIR=\${WORKSPACE_ROOT}

# PM Director Configuration
SHARED_WORKSPACE_PATH=\${WORKSPACE_ROOT}/.shared-workspace
ACTOR_WORKSPACES=\${WORKSPACE_ROOT}

# MCP CLI Use Security Configuration
ALLOWED_COMMANDS=claude
ALLOWED_FLAGS=-c,-p,--continue,--prompt
MAX_COMMAND_LENGTH=1024
COMMAND_TIMEOUT=60
ALLOW_SHELL_OPERATORS=false

# Telegram Authentication Configuration
TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here
CODER_AUTH_URL=http://localhost:1780/api/telegram/auth

# User Access Control
# Set to "everyone" to allow all users, or comma-separated list of @usernames
TELEGRAM_ALLOWED_USERS=@yourusername,@admin,@trusted_user
# Alternative: TELEGRAM_ALLOWED_USERS=everyone

# Integration Tokens (add your values)
# GITHUB_TOKEN=your_github_token_here
# OPENAI_API_KEY=your_openai_api_key_here
# ANTHROPIC_API_KEY=your_anthropic_api_key_here
# NGROK_AUTHTOKEN=your_ngrok_auth_token_here
EOF
    echo "✅ Created new PM .env file"
fi

# Test environment
echo "🧪 Testing environment..."
export WORKSPACE_ROOT="$WORKSPACE_ROOT"
# Source PM's .env for testing
source "$WORKSPACE_ROOT/pm/.env"

# Check paths (flat git submodule structure)
if [[ -d "$WORKSPACE_ROOT/pm" ]]; then
    echo "✅ PM Director submodule found"
else
    echo "❌ PM Director submodule not found at $WORKSPACE_ROOT/pm"
fi

if [[ -d "$WORKSPACE_ROOT/platforma" ]]; then
    echo "✅ Coder Actor submodule found"
else
    echo "⚠️  Coder Actor submodule not found at $WORKSPACE_ROOT/platforma"
fi

if [[ -d "$WORKSPACE_ROOT/pm/scripts" ]]; then
    echo "✅ PM scripts directory found"
else
    echo "❌ PM scripts directory not found at $WORKSPACE_ROOT/pm/scripts"
fi

if [[ -f "$WORKSPACE_ROOT/CLAUDE.md" ]]; then
    echo "✅ PM Director instructions found"
else
    echo "❌ CLAUDE.md not found at $WORKSPACE_ROOT"
fi

echo ""
echo "🎉 Setup complete! Environment type: $ENV_TYPE"
echo ""
echo "Next steps:"
echo "1. Update pm/.env with your tokens if needed"
echo "2. Run: source pm/.env"
echo "3. For Codespaces: Port 9000 is auto-forwarded"
echo "4. For local: Use ngrok to expose port 9000"
echo ""