#!/bin/bash

# Director Environment Setup Script
# Detects environment (local vs GitHub Codespaces) and configures paths

echo "🔧 Setting up Director environment..."

# Function to detect environment
detect_environment() {
    if [ -n "$CODESPACE_NAME" ]; then
        echo "codespace"
        return 0
    else
        echo "local"
        return 0
    fi
}

# Function to get workspace root
get_workspace_root() {
    local env_type=$1
    
    if [ "$env_type" = "codespace" ]; then
        # Use the current workspace name
        echo "/workspaces/$(basename $GITHUB_REPOSITORY 2>/dev/null || echo 'workspace')"
    else
        # Try to find workspace root by looking for CLAUDE.md
        local current_dir=$(pwd)
        while [ "$current_dir" != "/" ]; do
            if [ -f "$current_dir/CLAUDE.md" ]; then
                echo "$current_dir"
                return 0
            fi
            current_dir=$(dirname "$current_dir")
        done
        
        # Fallback to current directory
        echo $(pwd)
    fi
}

# Detect environment
ENV_TYPE=$(detect_environment)
echo "📍 Detected environment: $ENV_TYPE"

# Get workspace root
WORKSPACE_ROOT=$(get_workspace_root $ENV_TYPE)
echo "📂 Workspace root: $WORKSPACE_ROOT"

# Create .env.detected with auto-detected values
cat > .env.detected << EOF
# Auto-detected environment configuration
# Generated by setup-environment.sh

# Environment type
ENV_TYPE=$ENV_TYPE

# Workspace paths
WORKSPACE_ROOT=$WORKSPACE_ROOT
DIRECTOR_HOME=\$WORKSPACE_ROOT
MCP_CLI_DIR=\$WORKSPACE_ROOT/apps/mcp/cli_use
ALLOWED_DIR=\$WORKSPACE_ROOT
SHARED_WORKSPACE_PATH=\$WORKSPACE_ROOT/.shared-workspace

# Director configuration
DIRECTOR_PORT=9000
DIRECTOR_NAME=director

# Actor paths (populated as actors are added)
EOF

# Find and add actor paths
# Check for flat structure (sibling directories)
if [ -f "../CLAUDE.md" ]; then
    echo "" >> .env.detected
    echo "# Actor paths (flat structure - auto-detected)" >> .env.detected
    
    for actor_dir in ../*/; do
        if [ -d "$actor_dir" ] && [ "$actor_dir" != "../$(basename $WORKSPACE_ROOT)/" ]; then
            # Skip boilerplate directories
            actor_name=$(basename "$actor_dir")
            if [[ ! "$actor_name" =~ _boilerplate$ ]] && [ -f "$actor_dir/project.json" ]; then
                actor_name_upper=$(echo "$actor_name" | tr '[:lower:]' '[:upper:]')
                echo "${actor_name_upper}_ROOT=\$WORKSPACE_ROOT/../$actor_name" >> .env.detected
            fi
        fi
    done
# Check for nested structure (packages directory)
elif [ -d "$WORKSPACE_ROOT/packages" ]; then
    echo "" >> .env.detected
    echo "# Actor paths (nested structure - auto-detected)" >> .env.detected
    
    for actor_dir in $WORKSPACE_ROOT/packages/*/; do
        if [ -d "$actor_dir" ]; then
            actor_name=$(basename "$actor_dir")
            actor_name_upper=$(echo "$actor_name" | tr '[:lower:]' '[:upper:]')
            echo "${actor_name_upper}_ROOT=\$WORKSPACE_ROOT/packages/$actor_name" >> .env.detected
        fi
    done
fi

echo ""
echo "✅ Environment detection complete!"
echo ""
echo "📝 Created .env.detected with auto-detected paths"
echo ""
echo "Next steps:"
echo "1. Copy .env.example to .env if not exists"
echo "2. Update .env with any specific configurations"
echo "3. Run: npx nx generate-mcp-config"
echo "4. Start orchestration: npx nx run workspace:start-orchestration"

# Create .env from .env.example if it doesn't exist
if [ ! -f .env ] && [ -f .env.example ]; then
    echo ""
    echo "📋 Creating .env from .env.example..."
    cp .env.example .env
    echo "✅ Created .env - please update with your specific values"
fi

# Source the detected environment
export $(cat .env.detected | grep -v '^#' | xargs)
echo ""
echo "🚀 Environment variables loaded!"